@page "/SpeakingRosesTest/StatusPage/{StatusId:int}"

@using SpeakingRosesTest.Areas.SpeakingRosesTest.StatusBack.Repositories;
@using SpeakingRosesTest.Areas.SpeakingRosesTest.StatusBack.Entities;
@using SpeakingRosesTest.Areas.SpeakingRosesTest.StatusBack.DTOs;
@inject StatusRepository statusRepository;

<!--FOREIGN CALLS (TABLES)-->


@if (StatusId == 0)
{
    <PageTitle>Add status - SpeakingRosesTest</PageTitle>
}
else
{
    <PageTitle>Edit status - SpeakingRosesTest</PageTitle>
}

<SpeakingRosesTest.Components.Layout.SideNav></SpeakingRosesTest.Components.Layout.SideNav>

<div class="main-content position-relative max-height-vh-100 h-100">
    <SpeakingRosesTest.Components.Layout.NavBarDashboard Pagina="Status"></SpeakingRosesTest.Components.Layout.NavBarDashboard>
    <div class="container-fluid px-2 px-md-4">
        <div class="page-header min-height-300 border-radius-xl mt-4"
             style="background-image: url('assets/img/illustrations/Landscape2.jpg');">
            <span class="mask bg-gradient-primary opacity-6"></span>
        </div>
        <div class="card card-body mx-3 mx-md-4 mt-n6">
            <div class="card-header mb-0 pb-0">
                <h3 class="mb-3">
                    @if (StatusId == 0)
                    {
                        <span>Add status</span>
                    }
                    else
                    {
                        <span>Edit status</span>
                    }
                </h3>
                <NavLink class="btn btn-outline-dark" href="SpeakingRosesTest/StatusPage">
                    <span class="fas fa-chevron-left"></span>
                    &nbsp;Go back
                </NavLink>
                <hr />
            </div>
            <div class="card-body px-0">
                <form method="post" @onsubmit="Submit"
                      @formname="status-form" class="mb-4">
                    <AntiforgeryToken />
                    <!--Name-->
                    <div class="input-group input-group-static mb-5 pb-2">
                        <label for="name">
                            Name
                            @if(ErrorMessageName != "")
                            {
                            @((MarkupString)ErrorMessageName)
                            }
                        </label>
                        <input type="text"
                               id="name"
                               class="form-control pt-0"
                               value="@Status!.Name"
                               @onchange="HandleNameChange" />
                    </div>
                    
                    <hr />
                    @((MarkupString)Message)
                    <div class="d-flex justify-content-between">
                        <button id="btn-submit" type="submit"
                                class="btn btn-success">
                            <i class="fas fa-pen"></i>
                            @if (StatusId == 0)
                            {
                                <span>Add</span>
                            }
                            else
                            {
                                <span>Edit</span>
                            }
                        </button>
                        <NavLink class="btn btn-outline-dark mx-3" href="SpeakingRosesTest/StatusPage">
                            <span class="fas fa-chevron-left"></span>
                            &nbsp;Go back
                        </NavLink>
                    </div>
                </form>
                
            </div>
        </div>
    </div>

    <SpeakingRosesTest.Components.Layout.FixedPlugin></SpeakingRosesTest.Components.Layout.FixedPlugin>
    <SpeakingRosesTest.Components.Layout.FooterDashboard></SpeakingRosesTest.Components.Layout.FooterDashboard>
</div>

@code {
    #region Properties
    [Parameter]
    public int StatusId { get; set; }

    public string Message { get; set; } = "";

    [SupplyParameterFromForm]
    public Status Status { get; set; } = new();

    //Error messages for inputs
    public string ErrorMessageStatusId { get; set; } = "";
    public string ErrorMessageActive { get; set; } = "";
    public string ErrorMessageDateTimeCreation { get; set; } = "";
    public string ErrorMessageDateTimeLastModification { get; set; } = "";
    public string ErrorMessageUserCreationId { get; set; } = "";
    public string ErrorMessageUserLastModificationId { get; set; } = "";
    public string ErrorMessageName { get; set; } = "";
    #endregion

    protected override void OnInitialized()
    {
        try
        {
            if (StatusId == 0)
            {
                //Create new Status
                Status = new();
            }
            else
            {
                //Edit Status

                Status = statusRepository
                            .GetByStatusId(StatusId);
            }

            base.OnInitialized();
        }
        catch (Exception ex)
        {
            Failure failure = new()
                {
                    Active = true,
                    DateTimeCreation = DateTime.Now,
                    DateTimeLastModification = DateTime.Now,
                    UserCreationId = 1,
                    UserLastModificationId = 1,
                    EmergencyLevel = 1,
                    Comment = "",
                    Message = ex.Message,
                    Source = ex.Source,
                    StackTrace = ex.StackTrace
                };

            failureRepository.Add(failure);

            Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                There was an error. Please, try again. Error message: {ex.Message}
                            </div>";
        }
    }

    private async Task Submit()
    {
        try
        {
            if (StatusId == 0)
            {
                //Create new Status
                Status.Active = true;
                Status.UserCreationId = 1;
                Status.UserLastModificationId = 1;
                Status.DateTimeCreation = DateTime.Now;
                Status.DateTimeLastModification = DateTime.Now;

                if(Check("") == null)
                {
                    statusRepository
                        .Add(Status);

                    //Redirect to users page
                    NavigationManager.NavigateTo("SpeakingRosesTest/StatusPage");
                }


            }
            else
            {
                //Update data
                Status.DateTimeLastModification = DateTime.Now;
                Status.UserLastModificationId = 1;

                if(Check("") == null)
                {
                    statusRepository
                            .Update(Status);

                    //Redirect to users page
                    NavigationManager.NavigateTo("SpeakingRosesTest/StatusPage");
                }
            }
        }
        catch (Exception ex)
        {
            Failure failure = new()
                {
                    Active = true,
                    DateTimeCreation = DateTime.Now,
                    DateTimeLastModification = DateTime.Now,
                    UserCreationId = 1,
                    UserLastModificationId = 1,
                    EmergencyLevel = 1,
                    Comment = "",
                    Message = ex.Message,
                    Source = ex.Source,
                    StackTrace = ex.StackTrace
                };

            failureRepository.Add(failure);

            Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                There was an error. Please, try again. Error message: {ex.Message}
                            </div>";
        }
        finally
        {
            //Re-render the page to show ScannedText
            await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
        }
    }

    #region Uploaders
    
    #endregion    

    #region SEARCHERS FOR FOREIGN TABLES
    
    #endregion

    /// <summary>
    /// 
    /// </summary>
    /// <param name="attributeToValid">Debe estar encapsulado en []. Ejemplo: [Boolean]</param>
    /// <returns></returns>
    private ValidationResult Check(string attributeToValid)
    {
        try
        {
            List<ValidationResult> lstValidationResult = new List<ValidationResult>();
            ValidationContext ValidationContext = new ValidationContext(Status);

            bool IsValid = Validator.TryValidateObject(Status, ValidationContext, lstValidationResult, true);

            ValidationResult ValidationResult = lstValidationResult
            .AsQueryable()
            .FirstOrDefault(x => x.ErrorMessage.StartsWith(attributeToValid));

            if (!IsValid)
            {
                Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                Para guardar correctamente debe completar los siguientes puntos: <br/> <ul>";

                foreach (var validationResult in lstValidationResult)
                {
                    validationResult.ErrorMessage = validationResult.ErrorMessage.Substring(validationResult.ErrorMessage.IndexOf(']') + 1);
                    Message += $@"<li>{validationResult}</li>";
                }

                Message = Message + "</ul></div>";
            }
            else
            {
                Message = $@"<div class=""alert alert-successs text-white font-weight-bold"" role=""alert"">
                                Todos los datos ingresados son correctos
                            </div>";
            }


            if (ValidationResult != null)
            {
                ValidationResult.ErrorMessage = ValidationResult.ErrorMessage.Substring(ValidationResult.ErrorMessage.IndexOf(']') + 1);
            }

            return ValidationResult;
        }
        catch (Exception ex)
        {
            Failure failure = new()
                {
                    Active = true,
                    DateTimeCreation = DateTime.Now,
                    DateTimeLastModification = DateTime.Now,
                    UserCreationId = 1,
                    UserLastModificationId = 1,
                    EmergencyLevel = 1,
                    Comment = "",
                    Message = ex.Message,
                    Source = ex.Source,
                    StackTrace = ex.StackTrace
                };

            failureRepository.Add(failure);

            Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                There was an error. Please, try again. Error message: {ex.Message}
                            </div>";

            return null;
        }
        finally
        {

        }
    }

    #region Handlers
    private async Task HandleNameChange(ChangeEventArgs e)
    {
        Status.Name = e.Value?.ToString();
        ValidationResult ValidationResult = Check("[Name]");

        if (ValidationResult == null)
        {
            ErrorMessageName = $@"<span class=""text-success"">
                <i class=""fas fa-circle-check""></i>
            </span>";
        }
        else
        {
            ErrorMessageName = $@"<span class=""text-danger"">
                <i class=""fas fa-circle-xmark""></i>
                {ValidationResult.ErrorMessage}
            </span>";
        }

        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    
    #endregion
}

